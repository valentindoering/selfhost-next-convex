name: Deploy to Staging

on:
  push:
    branches: [ main ]
  workflow_dispatch: # Allow manual triggering

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN || secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch,suffix=-{{sha}}
          type=raw,value=staging
          type=raw,value=staging-{{date 'YYYYMMDD-HHmmss'}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          NEXT_PUBLIC_CONVEX_URL=${{ secrets.STAGING_CONVEX_URL }}
          NEXT_TELEMETRY_DISABLED=1
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to staging server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ secrets.STAGING_PORT || 22 }}
        script: |
          set -e
          
          echo "üöÄ Starting deployment..."
          
          # Navigate to project directory
          cd /srv/apps/next-convex/staging
          
          # Login to GHCR
          echo "${{ secrets.GHCR_TOKEN || secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Pull latest image
          echo "üì¶ Pulling latest Docker image..."
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging
          
          # Update and restart services
          echo "üîÑ Restarting services..."
          docker compose pull nextjs-staging
          docker compose up -d nextjs-staging
          
          # Clean up old images
          echo "üßπ Cleaning up old images..."
          docker image prune -f
          
          # Health check
          echo "üè• Performing health check..."
          sleep 10
          if curl -f https://staging.app.valentindoering.de > /dev/null 2>&1; then
              echo "‚úÖ Deployment successful!"
          else
              echo "‚ùå Health check failed!"
              exit 1
          fi
